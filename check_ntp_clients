#!/usr/bin/env php
<?php

/**
* check private ntp servers for stale clients
* supports chrony, ntpsec, and ntpd.
*
* https://github.com/robdevops/check_ntp_clients/
*
* requirements:
*	- for ntpd or ntpsec, ensure there is no "disable monitor" in ntp.conf.
*	- for chrony, requires running as root or using --sudo option.
*	- sudo option requires sudoers to allow '/usr/bin/chronyc -c clients'
*
* future plans:
*	- verify ipv6 support
*/

$output = [];
$fresh_clients = [];
$stale_clients = [];
$me = basename(__FILE__);

// input handling
$shortopts = 'hi:ps:Sw:';
$longopts = ['help', 'ignore:', 'ping', 'source:', 'sudo', 'warning:' ];
$options = getopt($shortopts, $longopts);

// help
if(isset($options['h']) or isset($options['help'])) {
	echo "Usage: $me -s <SOURCE> [-hpu] [-i IP_ADDRESS] [-w SECONDS]

Options:
-h, --help\t\tThis help.
-i, --ignore\t\tClient to ignore. Can be specified multiple times.
-p, --ping\t\tPing stale clients, ignore any which do not respond.
-s, --source\t\tSource daemon (ntpd, chrony, ntpsec). REQUIRED.
-S, --sudo\t\tUse sudo for chrony source. Sudoers must allow '/usr/bin/chronyc -c clients'.
-w, --warning\t\tWarning threshold. Minimum 60. Defaults to two days.

Examples:
$me --source source chrony --sudo --ping --warning 86400
$me -s ntpsec -w 43200
";
	exit(3);
}

// source selection
if(isset($options['s']) and isset($options['source'])) {
	print("You can only specify one source daemon. See -h for help.") . PHP_EOL;

} elseif(isset($options['s'])) {
	$source = $options['s'];

} elseif(isset($options['source'])) {
	$source = $options['source'];

} else {
	print("You must specifiy a source daemon. See -h for help." . PHP_EOL);
	exit(3);
}

if($source === 'chrony') {
	$path = exec('which chronyc 2>/dev/null');
	if(!is_executable("$path")) {
		print("Can't find chronyc executable. Aborting." . PHP_EOL);
		exit(3);
	}
	if(isset($options['S']) or isset($options['sudo'])) {
		$get_ntp_clients = "sudo $path -c clients";
	} else {
		$get_ntp_clients = "$path -c clients";
	}

} elseif($source === 'ntpsec') {
	$path = exec('which ntpq 2>/dev/null');
	if(!is_executable("$path")) {
		print("Can't find ntpq executable. Aborting." . PHP_EOL);
		exit(3);
	}
	$get_ntp_clients = "$path -nc mrulist";

} elseif($source === 'ntpd') {
	$path = exec('which ntpdc 2>/dev/null');
	if(!is_executable("$path")) {
		print("Can't find ntpdc executable. Try re-running with source chrony or --source ntpsec. See -h for help." . PHP_EOL);
		exit(3);
	}
	$get_ntp_clients = "$path -nc monlist";
} else {
	print("Valid source daemons are: ntpd, ntpsec, chrony. See -h for help." . PHP_EOL);
	exit(3);
}

// ignore list
$ignore = ['127.0.0.1', '::1'];
if(isset($options['i'])) {
	$ignore_flatten = array_merge(...[$options['i']]);
	$ignore = array_merge($ignore, $ignore_flatten);
}
if(isset($options['ignore'])) {
	$ignore_flatten = array_merge(...[$options['ignore']]);
	$ignore = array_merge($ignore, $ignore_flatten);
}

// ping option
$ping = false;
if(isset($options['p']) or isset($options['ping'])) {
	$ping = true;
}

// warning threshold
$threshold = 172800; // two day default
if(isset($options['w']) and isset($options['warning'])) {
	print('-w, --warning can only be specified once. See -h for help.' . PHP_EOL);
	exit(3);
} elseif(isset($options['w'])) {
	if(is_array($options['w'])) {
		print('-w can only be specified once. See -h for help.' . PHP_EOL);
		exit(3);
	}
	$threshold = $options['w'];
} elseif(isset($options['warning'])) {
	if(is_array($options['warning'])) {
		print('--warning can only be specified once. See -h for help.' . PHP_EOL);
		exit(3);
	}
	$threshold = $options['warning'];
}
if(!is_numeric($threshold)) {
	print('Threshold must be a number. See -h for help.' . PHP_EOL);
	exit(3);
}
if($threshold < 60) {
	print('Mimumum threshold is 60 seconds. See -h for help.' . PHP_EOL);
	exit(3);
}

function humantime($remainder) {
	$return = '';
	$unit[0] = [60, 'minute'];
	$unit[1] = [3600, 'hour'];
	$unit[2] = [86400, 'day'];

	for($i = 2; $i > -1; $i--) {
		 $filled[$i] = intval($remainder / $unit[$i][0]);
		 $remainder -= ($filled[$i] * $unit[$i][0]);
		 if($filled[$i] != 0) {
			$return .= abs($filled[$i]) . ' ' . $unit[$i][1] . (($filled[$i] > 1) ? 's' : '') . ' ';
		 }
	}
	return $return;
}

// we only want clients
$servers = [];
if($source === 'ntpd') {
	unset($peeroutput);
	exec('ntpdc -nc listpeers', $peeroutput);
	foreach($peeroutput as $line) {
		$columns = preg_split('/\s+/', trim($line));
		$servers[] = $columns[1];
	}
	if(empty($servers)) {
		print("Error fetching server list from ntpd." . PHP_EOL);
		exit(3);
	}
	$ignore = array_merge($ignore, $servers);

} elseif($source === 'ntpsec') {
	unset($peeroutput);
	exec('ntpq -np', $peeroutput);
	foreach($peeroutput as $line) {
		if(preg_match('/(\d{1,3}\.){3}\d{1,3}/', $line, $ip_match)) {
			$servers[] = $ip_match[0];
		}
	}
	if(empty($servers)) {
		print("Error fetching server list from ntpsec." . PHP_EOL);
		exit(3);
	}
	$ignore = array_merge($ignore, $servers);
}

// main fetch
unset($output);
exec($get_ntp_clients, $output);

// process raw data to get stale clients
foreach($output as $line) {
	// ipv6 or ipv4 + column separator + non-zero digit
	if(preg_match("/(^((:){0,2}([0-9a-fA-F]{1,4}:)+:).*|((\d{1,3}\.){3}\d{1,3})[,\s]+[1-9])|(^\s+[0-9]+\s+)/", $line)) {
		$columns = preg_split('/[,\s]+/', trim($line));
		if($source === 'ntpsec') {
			$client = $columns[8];
		} else {
			$client = $columns[0];
		}
		if($source === 'ntpd') {
			$seconds = $columns[8];

		} elseif ($source === 'ntpsec') {
			$seconds = $columns[0];

		} elseif ($source === 'chrony') {
			$seconds = $columns[5];

		}
		if(!is_numeric($seconds)) {
			fwrite(STDERR, "$client age unknown: $seconds" . PHP_EOL);
		}
		// exclude ignore list
		if(!in_array($client, $ignore)) {

			// exclude fresh clients
			if($seconds > $threshold) {

				// optionally exclude offline clients
				if($ping === true) {
					exec("ping -qc1 $client -W1 2>/dev/null", $pingout, $pingreturn);
					if($pingreturn === 0) {
						$stale_clients += [ $client => $seconds ];
					}
				} else {
					$stale_clients += [ $client => $seconds ];
				}
			} else {
				$fresh_clients[] = $client;
			}
		}
	}
}

// our output
if(empty($output)) {
	$return_status = 3;
	print("UNKNOWN: Error fetching client list from $source" . PHP_EOL);

} elseif(empty($fresh_clients) and empty($stale_clients)) {
	$return_status = 1;
	$whoami = getenv('USERNAME') ?: getenv('USER');
	if($source === 'chrony' and $whoami !== 'root') {
		print("WARNING: No known clients. Try re-running with --sudo. See -h for help." . PHP_EOL);
	} else {
		print("WARNING: No known clients. |clients=0;;;" . PHP_EOL);
	}

} elseif(count($stale_clients)) {
	$return_status = 1;
	$clientcount = count($fresh_clients);
	$stale_count = count($stale_clients);
	print("WARN: $stale_count stale clients:" . PHP_EOL . PHP_EOL);
	foreach($stale_clients as $key => $value) {
		$client = $key;
		$seconds = $value;
		$humantime = humantime($seconds);
		$domain = gethostbyaddr($client);
		print("$domain stale for $humantime" . PHP_EOL);
	}
	print(PHP_EOL. "If this is ok, add the client to the ignore list (recommended), or restart $source to clear all known clients. |clients=$clientcount;;;" . PHP_EOL);

} else {
	$return_status = 0;
	$clientcount = count($fresh_clients);
	print("OK: $clientcount known clients. |clients=$clientcount;;;" . PHP_EOL);
}

exit($return_status);

